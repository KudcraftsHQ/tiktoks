// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Carousel models removed - migrated to RemixPost system

// Cache Assets for media caching with background processing

model CacheAsset {
  id          String   @id @default(uuid()) @db.Uuid
  originalUrl String   @unique
  cacheKey    String?  // R2 storage key
  status      CacheStatus @default(PENDING)
  fileSize    Int?
  contentType String?
  cachedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cache_assets")
  @@index([status])
  @@index([originalUrl])
}

enum CacheStatus {
  PENDING
  DOWNLOADING
  CACHED
  FAILED
}

// New models for TikTok Profile Explorer

model TiktokProfile {
  id          String   @id @default(cuid())
  handle      String   @unique // TikTok username (unique_id)
  nickname    String?  // Display name
  avatarId    String?  @db.Uuid // Cache asset ID reference
  bio         String?  // Profile bio/description
  verified    Boolean  @default(false)
  followerCount Int?   @default(0)
  followingCount Int?  @default(0)
  videoCount  Int?     @default(0)
  likeCount   Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts       TiktokPost[]

  @@map("tiktok_profiles")
  @@index([handle])
}

model TiktokPost {
  id          String   @id @default(cuid())
  tiktokId    String   @unique // TikTok's aweme_id
  profileId   String
  tiktokUrl   String   @unique
  contentType String   // 'video' or 'photo'
  title       String?  // Generated or extracted title
  description String?  // Caption/desc from TikTok

  // Media cache asset ID references
  videoId     String?  @db.Uuid // Video cache asset ID reference
  coverId     String?  @db.Uuid // Cover cache asset ID reference
  musicId     String?  @db.Uuid // Music cache asset ID reference

  // Image carousel data (for photo posts)
  // Array of objects: [{"cacheAssetId": "uuid", "width": 100, "height": 200}]
  images      Json     @default("[]")

  // OCR and text extraction
  ocrTexts     Json     @default("[]") // Array of objects: [{"imageIndex": 0, "text": "extracted text"}]
  ocrStatus    String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  ocrProcessedAt DateTime?

  // Author info (denormalized for performance)
  authorNickname String?
  authorHandle   String?
  authorAvatarId String?  @db.Uuid // Author avatar cache asset ID reference

  // Hashtags and mentions
  hashtags    Json     @default("[]") // Array of hashtag objects
  mentions    Json     @default("[]") // Array of mentioned users

  // Engagement metrics
  viewCount    BigInt?  @default(0)
  likeCount    Int?     @default(0)
  shareCount   Int?     @default(0)
  commentCount Int?     @default(0)
  saveCount    Int?     @default(0)

  // Video specific metrics
  duration     Float?   // Video duration in seconds

  // Timestamps
  publishedAt  DateTime? // When the post was published on TikTok
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile      TiktokProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  collections  CollectionPost[]
  remixes      RemixPost[]

  @@map("tiktok_posts")
  @@index([profileId])
  @@index([contentType])
  @@index([publishedAt])
  @@index([authorHandle])
  @@index([ocrStatus])
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Hex color for UI theming
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts       CollectionPost[]

  @@map("collections")
}

model CollectionPost {
  id           String     @id @default(cuid())
  collectionId String
  postId       String
  addedAt      DateTime   @default(now())

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         TiktokPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([collectionId, postId])
  @@map("collection_posts")
  @@index([collectionId])
  @@index([postId])
}

// Remix system for TikTok posts - Simplified JSON structure

model RemixPost {
  id              String   @id @default(cuid())
  originalPostId  String   // Reference to TikTokPost
  name            String
  description     String?
  generationType  String   @default("manual") // 'manual', 'ai_paraphrase'

  // Complete slide structure with canvas, backgrounds, and text boxes in JSON
  slides          Json     @default("[]") // Array of RemixSlide objects with full structure

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  originalPost    TiktokPost @relation(fields: [originalPostId], references: [id], onDelete: Cascade)

  @@map("remix_posts")
  @@index([originalPostId])
}

// Product Context for storing product information and prompts

model ProductContext {
  id          String   @id @default(cuid())
  title       String
  description String   // Prompt description for the product
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_contexts")
  @@index([title])
}

